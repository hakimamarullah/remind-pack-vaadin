# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Build and Deploy to VPS

on:
  push:
    branches: [ "master" ]
    tags: [ "v*" ]  # Trigger on tags

jobs:
  build_and_push:
    name: Build and Push Docker image
    environment: production
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ vars.DOCKER_IMAGE_NAME }}
          tags: |
            # Use tag name for tagged releases
            type=ref,event=tag
            # Use 'latest' for master branch pushes
            type=raw,value=latest,enable={{is_default_branch}}
            # Use short SHA for branch pushes type=sha,prefix={{branch}}-

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Save deployment info
        run: |
          # Save the deployment info to a file for the next job
          echo "IMAGE_NAME=${{ vars.DOCKER_IMAGE_NAME }}" >> deployment.env
          echo "SERVICE_NAME=${{ vars.SERVICE_NAME }}" >> deployment.env
          
          # Extract the primary tag (first line)
          PRIMARY_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -1)
          echo "IMAGE_TAG=$PRIMARY_TAG" >> deployment.env
          
          echo "Deployment info:"
          cat deployment.env

      - name: Upload deployment info
        uses: actions/upload-artifact@v4
        with:
          name: deployment-info
          path: deployment.env

  deploy:
    name: Deploy to VPS
    needs: build_and_push
    environment: production
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Download deployment info
        uses: actions/download-artifact@v4
        with:
          name: deployment-info

      - name: Copy deployment info to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          source: "deployment.env"
          target: "/tmp/"

      - name: Copy deployment script to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: ${{ secrets.VPS_PORT || 22 }}
          source: "scripts/deploy.sh"
          target: "/tmp/"

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: ${{ secrets.VPS_PORT || 22 }}
          script: |
            # Make script executable
            chmod +x /tmp/scripts/deploy.sh
            
            # Load deployment info from artifact
            source /tmp/deployment.env
            
            echo "Deploying with image: $IMAGE_TAG"
            echo "Service: $SERVICE_NAME"
            
            # Run deployment script
            /tmp/scripts/deploy.sh "$IMAGE_TAG" "$SERVICE_NAME"